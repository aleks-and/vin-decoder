{"version":3,"sources":["api.js","components/SearchForm/SearchForm.js","components/SearchForm/tools.js","components/SearchForm/index.js","components/SearchResult/index.js","components/SearchResult/SearchResult.js","components/LastSearchResults/index.js","components/LastSearchResults/LastSearchResults.js","components/Home/index.js","components/Home/Home.js","utils/prepare.HTML.js","components/Variables/Variables.js","components/Variables/index.js","components/NotFound/index.js","components/NotFound/NotFound.js","constants/routes.js","components/Variable/Variable.js","components/Variable/index.js","components/Menu/index.js","components/Menu/Menu.js","components/Header/index.js","components/Header/Header.js","components/ScrollToTop/index.js","components/ScrollToTop/ScrollToTop.js","App.js","reportWebVitals.js","index.js"],"names":["BASE_URL","decodeVin","id","fetch","then","response","ok","Error","statusText","json","getVinVariables","SearchForm","isDecoding","setIsDecoding","setDecodedVinData","decodedVinData","searchInput","setSearchInput","previousVinCode","setPreviousVinCode","setLastSearchResults","useContext","LastSearchResultsContext","onSubmit","event","a","preventDefault","value","isInputFieldValid","test","trim","isValid","data","Results","message","Message","filteredData","filter","Value","isError","isLoaded","code","previousState","slice","onChange","target","type","placeholder","maxLength","disabled","SearchResult","length","map","description","name","Variable","VariableId","LastSearchResults","lastSearchResults","index","onClick","currentVinCode","Home","useState","prepareHTML","__html","Variables","isLoading","setIsLoading","setIsError","IsVariablesLoadedContext","isVariablesLoaded","setIsVariablesLoaded","VariablesContext","variables","setVariables","useEffect","fetchData","ID","Name","Description","Fragment","to","dangerouslySetInnerHTML","NotFound","routes","MAIN","VARIABLES","VARIABLE","variable","setVariable","useParams","find","Number","Menu","activeClassName","exact","Header","className","ScrollToTop","pathname","useLocation","window","scrollTo","React","createContext","App","Provider","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b16bebf5.chunk.js","sourcesContent":["const BASE_URL = 'https://vpic.nhtsa.dot.gov/api';\n\nexport const decodeVin = id => {\n    return fetch(`${BASE_URL}/vehicles/decodevin/${id}?format=json`)\n        .then( response => {\n            if ( !response.ok ) {\n                throw new Error(response.statusText);\n            }\n\n            return response.json();\n        })\n};\n\nexport const getVinVariables = () => {\n    return fetch(`${BASE_URL}/vehicles/getvehiclevariablelist?format=json`)\n        .then( response => {\n            if ( !response.ok ) {\n                throw new Error(response.statusText);\n            }\n\n            return response.json();\n        })\n};\n\nconst api = {\n    decodeVin,\n    getVinVariables\n};\n\n\nexport default api;\n","import { useContext } from 'react';\n\nimport { decodeVin } from '../../api';\nimport { isInputValid } from './tools';\n\nimport { LastSearchResultsContext } from '../../App';\n\n\nconst SearchForm = ({\n    isDecoding,\n    setIsDecoding,\n    setDecodedVinData,\n    decodedVinData,\n    searchInput,\n    setSearchInput,\n    previousVinCode,\n    setPreviousVinCode\n}) => {\n    const {setLastSearchResults} = useContext(LastSearchResultsContext);\n\n    const onSubmit = async event => {\n        event.preventDefault();\n\n        const isInputFieldValid = isInputValid(searchInput.value);\n\n        setSearchInput({\n            ...searchInput,\n            isValid: isInputFieldValid\n        });\n\n        if (\n            !isInputFieldValid\n            || previousVinCode === searchInput.value\n        ) {\n            return;\n        }\n\n        setIsDecoding(true);\n        setPreviousVinCode(searchInput.value);\n\n        try {\n            const {Results: data, Message: message} = await decodeVin(searchInput.value);\n            const filteredData = data.filter(( {Value: description} ) => description !== null);\n\n            setDecodedVinData({\n                isError: false,\n                isLoaded: true,\n                data: filteredData,\n                code: searchInput.value,\n                message\n            });\n\n            setLastSearchResults(previousState => [\n                {data: filteredData, message, code: searchInput.value},\n                ...previousState.slice(0, 4)\n            ]);\n        } catch {\n            setDecodedVinData({\n                ...decodedVinData,\n                isError: true,\n                isLoaded: false,\n            })\n        } finally {\n            setIsDecoding(false);\n        }\n    };\n\n    const onChange = event => {\n        setSearchInput({\n            isValid: true,\n            value: event.target.value\n        })\n    };\n\n    return (\n        <>\n            <h2>Search</h2>\n            <form onSubmit={event => onSubmit(event)}>\n                <input\n                    value={searchInput.value}\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"Enter VIN to decode\"\n                    maxLength=\"17\"\n                />\n                <button\n                    type=\"submit\"\n                    disabled={isDecoding}\n                >\n                    {isDecoding ? 'Decoding...' : 'Decode'}\n                </button>\n            </form>\n            {!searchInput.isValid && <span>17 characters (A-Z & 0-9)</span>}\n        </>\n    )\n};\n\n\nexport default SearchForm;\n","export const isInputValid = value => /^[A-Z0-9]{17}$/.test(value.trim());\n","import SearchForm from './SearchForm';\n\nexport default SearchForm;\n","import SearchResult from './SearchResult';\n\nexport default SearchResult;\n","const SearchResult = ( {isDecoding, decodedVinData} ) => {\n    const {data, message, isLoaded, isError} = decodedVinData;\n\n    if ( isDecoding ) {\n        return (\n            <>\n                <h2>Decoded VIN data</h2>\n                <p>Decoding...</p>\n            </>\n        );\n    }\n\n    if ( isError ) {\n        return (\n            <>\n                <h2>Decoded VIN data</h2>\n                <p>Something went wrong. Please try again later.</p>\n            </>\n        );\n    }\n\n    if ( !isLoaded ) {\n        return <h2>Decoded VIN data</h2>;\n    }\n\n    if ( data.length === 0 ) {\n        return (\n            <>\n                <h2>Decoded VIN data</h2>\n                <p>No data for this VIN</p>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <h2>Decoded VIN data</h2>\n            <p>{message}</p>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Variable name</th>\n                        <th>Variable description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map(({Value: description, Variable: name, VariableId: id}) => (\n                        <tr key={id}>\n                            <td>{name}</td>\n                            <td>{description}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </>\n    );\n};\n\n\nexport default SearchResult;\n","import LastSearchResults from './LastSearchResults';\n\nexport default LastSearchResults;\n","import { useContext } from 'react';\n\nimport { LastSearchResultsContext } from '../../App';\n\n\nconst LastSearchResults = ({\n   setDecodedVinData,\n   decodedVinData,\n   setSearchInput,\n   setPreviousVinCode\n}) => {\n    const {lastSearchResults} = useContext(LastSearchResultsContext);\n\n    const onClick = index => {\n        const currentVinCode = lastSearchResults[index].code;\n\n        if ( decodedVinData.code === currentVinCode ) {\n            return;\n        }\n\n        setDecodedVinData({\n            isError: false,\n            isLoaded: true,\n            ...lastSearchResults[index]\n        });\n\n        setPreviousVinCode(currentVinCode);\n        setSearchInput({\n            value: currentVinCode,\n            isValid: true\n        });\n    };\n\n    if ( lastSearchResults.length === 0 ) {\n        return (\n            <>\n                <h2>Last search results</h2>\n                <p>No search performed</p>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <h2>Last search results</h2>\n            <ul>\n                {lastSearchResults.map(({code}, index) => (\n                    <li key={index} onClick={() => onClick(index)}>\n                        {code}\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n};\n\n\nexport default LastSearchResults;\n","import Home from './Home';\n\nexport default Home;\n","import { useState } from 'react';\n\nimport SearchForm from '../SearchForm';\nimport SearchResult from '../SearchResult';\nimport LastSearchResults from '../LastSearchResults';\n\n\nconst Home = () => {\n    const [isDecoding, setIsDecoding] = useState(false);\n    const [decodedVinData, setDecodedVinData] = useState({\n        data: [],\n        message: null,\n        code: null,\n        isLoaded: false,\n        isError: false\n    });\n\n    const [searchInput, setSearchInput] = useState({\n        value: '',\n        isValid: true\n    });\n    const [previousVinCode, setPreviousVinCode] = useState(searchInput.value);\n\n    return (\n        <main>\n            <article>\n                <h1>VIN decoder</h1>\n                <section>\n                    <SearchForm\n                        isDecoding={isDecoding}\n                        setIsDecoding={setIsDecoding}\n                        decodedVinData={decodedVinData}\n                        setDecodedVinData={setDecodedVinData}\n                        searchInput={searchInput}\n                        setSearchInput={setSearchInput}\n                        previousVinCode={previousVinCode}\n                        setPreviousVinCode={setPreviousVinCode}\n                    />\n                </section>\n                <aside>\n                    <LastSearchResults\n                        decodedVinData={decodedVinData}\n                        setDecodedVinData={setDecodedVinData}\n                        setSearchInput={setSearchInput}\n                        setPreviousVinCode={setPreviousVinCode}\n                    />\n                </aside>\n                <section>\n                    <SearchResult\n                        isDecoding={isDecoding}\n                        decodedVinData={decodedVinData}\n                    />\n                </section>\n            </article>\n        </main>\n    );\n};\n\n\nexport default Home;\n","const prepareHTML = data => ({__html: data});\n\nexport default prepareHTML;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { getVinVariables } from '../../api';\nimport prepareHTML from '../../utils/prepare.HTML';\n\nimport { IsVariablesLoadedContext, VariablesContext } from '../../App';\n\n\nconst Variables = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const { isVariablesLoaded, setIsVariablesLoaded } = useContext(IsVariablesLoadedContext);\n    const { variables, setVariables } = useContext(VariablesContext);\n\n    useEffect(() => {\n        if (\n            !isVariablesLoaded\n            && !isLoading\n            && !isError\n        ) {\n            async function fetchData () {\n                setIsLoading(true);\n                setIsError(false);\n\n                try {\n                    const {Results: data} = await getVinVariables();\n\n                    setVariables(data);\n                    setIsVariablesLoaded(true);\n                } catch ( {message} ) {\n                    setIsError(true);\n                } finally {\n                    setIsLoading(false);\n                }\n            }\n\n            fetchData();\n        }\n    });\n\n    if ( isLoading ) {\n        return (\n            <>\n                <h1>Variable list</h1>\n                <p>Loading...</p>\n            </>\n        );\n    }\n\n    if ( isError ) {\n        return (\n            <>\n                <h1>Variable list</h1>\n                <p>Something went wrong. Please try again later.</p>\n            </>\n        );\n    }\n\n    if ( variables.length === 0 ) {\n        return (\n            <>\n                <h1>Variable list</h1>\n                <p>The variable list is empty.</p>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <h1>Variable list</h1>\n            <dl>\n                {variables.map(({ID: id, Name: name, Description: description}) => (\n                    <React.Fragment key={id}>\n                        <dt>\n                            <Link to={`/variables/${id}`}>\n                                {name}\n                            </Link>\n                        </dt>\n                        <dd dangerouslySetInnerHTML={prepareHTML(description)} />\n                    </React.Fragment>\n                ))}\n            </dl>\n        </>\n    );\n};\n\n\nexport default Variables;\n","import Variables from './Variables';\n\nexport default Variables;\n","import NotFound from './NotFound';\n\nexport default NotFound;\n","const NotFound = () => (\n    <>\n        <h1>404</h1>\n        <p>Page not found</p>\n    </>\n);\n\n\nexport default NotFound;\n","const routes = {\n    MAIN: '/',\n    VARIABLES: '/variables',\n    VARIABLE: '/variables/:id'\n};\n\n\nexport default routes;\n","import { useEffect, useState, useContext } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { getVinVariables } from '../../api';\nimport prepareHTML from '../../utils/prepare.HTML';\nimport routes from '../../constants/routes';\n\nimport { IsVariablesLoadedContext, VariablesContext } from '../../App';\n\n\nconst Variable = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const [variable, setVariable] = useState(null);\n\n    const { isVariablesLoaded, setIsVariablesLoaded } = useContext(IsVariablesLoadedContext);\n    const { variables, setVariables } = useContext(VariablesContext);\n\n    const {id} = useParams();\n\n    useEffect(() => {\n        if (\n            !isVariablesLoaded\n            && !isLoading\n            && !isError\n        ) {\n            async function fetchData () {\n                setIsLoading(true);\n                setIsError(false);\n\n                try {\n                    const {Results: data} = await getVinVariables();\n\n                    setVariables(data);\n                    setIsVariablesLoaded(true);\n                } catch {\n                    setIsError(true);\n                } finally {\n                    setIsLoading(false);\n                }\n            }\n\n            fetchData();\n        }\n    });\n\n    useEffect(() => {\n        setVariable(variables.find(variable => variable.ID === Number(id)));\n    }, [variable, variables, id]);\n\n    if ( isLoading ) {\n        return (\n            <>\n                <h1>Variable description</h1>\n                <p>Loading...</p>\n            </>\n        );\n    }\n\n    if ( isError ) {\n        return (\n            <>\n                <h1>Variable description</h1>\n                <p>Something went wrong. Please try again later.</p>\n            </>\n        );\n    }\n\n    if ( !variable ) {\n        return (\n            <>\n                <h1>Variable description</h1>\n                <p>Variable not found</p>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <h1>Variable description</h1>\n            <dl>\n                <dt>{variable.Name}</dt>\n                <dd dangerouslySetInnerHTML={prepareHTML(variable.Description)} />\n            </dl>\n            <p>\n                <Link to={routes.VARIABLES}>Back to list</Link>\n            </p>\n        </>\n    );\n};\n\n\nexport default Variable;\n","import Variable from './Variable';\n\nexport default Variable;\n","import Menu from './Menu';\n\nexport default Menu;\n","import { NavLink } from 'react-router-dom';\n\nimport routes from '../../constants/routes';\n\n\nconst Menu = () => (\n    <ul>\n        <li>\n            <NavLink to={routes.MAIN} activeClassName=\"active\" exact>Home</NavLink>\n        </li>\n        <li>\n            <NavLink to={routes.VARIABLES} activeClassName=\"active\">Variables</NavLink>\n        </li>\n    </ul>\n);\n\n\nexport default Menu;\n","import Header from './Header';\n\nexport default Header;\n","import Menu from '../Menu';\nimport './Header.scss';\n\n\nconst Header = () => (\n    <header className=\"header\">\n        <Menu />\n    </header>\n);\n\n\nexport default Header;\n","import ScrollToTop from './ScrollToTop';\n\nexport default ScrollToTop;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n\nconst ScrollToTop = () => {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0,0);\n    }, [pathname]);\n\n    return null;\n};\n\n\nexport default ScrollToTop;\n","import React, { useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport Variables from './components/Variables';\nimport NotFound from './components/NotFound';\nimport Variable from './components/Variable';\nimport Header from './components/Header';\nimport ScrollToTop from './components/ScrollToTop';\n\nimport routes from './constants/routes';\n\nexport const IsVariablesLoadedContext = React.createContext(null);\nexport const VariablesContext = React.createContext(null);\nexport const LastSearchResultsContext = React.createContext(null);\n\n\nconst App = () => {\n    const [isVariablesLoaded, setIsVariablesLoaded] = useState(false);\n    const [variables, setVariables] = useState([]);\n    const [lastSearchResults, setLastSearchResults] = useState([]);\n\n    return (\n        <>\n            <ScrollToTop />\n            <LastSearchResultsContext.Provider value={{\n                lastSearchResults,\n                setLastSearchResults\n            }}>\n                <VariablesContext.Provider value={{\n                    variables,\n                    setVariables\n                }}>\n                    <IsVariablesLoadedContext.Provider value={{\n                        isVariablesLoaded,\n                        setIsVariablesLoaded\n                    }}>\n                        <Header />\n                        <Switch>\n                            <Route path={routes.MAIN} exact>\n                                <Home />\n                            </Route>\n                            <Route path={routes.VARIABLES} exact>\n                                <Variables />\n                            </Route>\n                            <Route path={routes.VARIABLE} exact>\n                                <Variable />\n                            </Route>\n                            <Route path='*'>\n                                <NotFound />\n                            </Route>\n                        </Switch>\n                    </IsVariablesLoadedContext.Provider>\n                </VariablesContext.Provider>\n            </LastSearchResultsContext.Provider>\n        </>\n    )\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport './index.scss';\n\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App/>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}