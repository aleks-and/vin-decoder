{"version":3,"sources":["components/Home/index.js","components/Home/Home.js","api.js","utils/prepare.HTML.js","components/Variables/Variables.js","components/Variables/index.js","components/NotFound/index.js","components/NotFound/NotFound.js","constants/routes.js","components/Variable/Variable.js","components/Variable/index.js","components/Menu/index.js","components/Menu/Menu.js","components/Header/index.js","components/Header/Header.js","components/ScrollToTop/index.js","components/ScrollToTop/ScrollToTop.js","App.js","reportWebVitals.js","index.js"],"names":["Home","apiUrls","getVinVariables","fetch","then","response","ok","Error","statusText","json","prepareHTML","data","__html","Variables","useState","isLoading","setIsLoading","isError","setIsError","useContext","IsVariablesLoadedContext","isVariablesLoaded","setIsVariablesLoaded","VariablesContext","variables","setVariables","useEffect","fetchData","a","Results","message","length","map","id","ID","name","Name","description","Description","Fragment","to","dangerouslySetInnerHTML","NotFound","routes","MAIN","VARIABLES","VARIABLE","Variable","variable","setVariable","useParams","find","Number","Menu","activeClassName","exact","Header","className","ScrollToTop","pathname","useLocation","console","log","window","scrollTo","React","createContext","App","Provider","value","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.e2fb35c1.chunk.js","sourcesContent":["import Home from './Home';\n\nexport default Home;\n","const Home = () => <h1>Vin Decoder</h1>;\n\n\nexport default Home;\n","const apiUrls = {\n    BASE: 'https://vpic.nhtsa.dot.gov/api',\n    GET_VARIABLES: '/vehicles/getvehiclevariablelist?format=json'\n};\n\nexport const decodeVin = () => {\n\n};\n\nexport const getVinVariables = () => {\n    return fetch(`${apiUrls.BASE}${apiUrls.GET_VARIABLES}`)\n        .then( response => {\n            if ( !response.ok ) {\n                throw new Error(response.statusText);\n            }\n\n            return response.json();\n        })\n};\n\nconst api = {\n    decodeVin,\n    getVinVariables\n};\n\n\nexport default api;\n","const prepareHTML = data => ({__html: data});\n\nexport default prepareHTML;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { getVinVariables } from '../../api';\nimport prepareHTML from '../../utils/prepare.HTML';\n\nimport { IsVariablesLoadedContext, VariablesContext } from '../../App';\n\n\nconst Variables = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const { isVariablesLoaded, setIsVariablesLoaded } = useContext(IsVariablesLoadedContext);\n    const { variables, setVariables } = useContext(VariablesContext);\n\n    useEffect(() => {\n        if (\n            !isVariablesLoaded\n            && !isLoading\n            && !isError\n        ) {\n            async function fetchData () {\n                setIsLoading(true);\n                setIsError(false);\n\n                try {\n                    const {Results: data} = await getVinVariables();\n\n                    setVariables(data);\n                    setIsVariablesLoaded(true);\n                } catch ( {message} ) {\n                    setIsError(true);\n                } finally {\n                    setIsLoading(false);\n                }\n            }\n\n            fetchData();\n        }\n    });\n\n    if ( isLoading ) {\n        return (\n            <>\n                <h1>Variable list</h1>\n                <p>Loading...</p>\n            </>\n        );\n    }\n\n    if ( isError ) {\n        return (\n            <>\n                <h1>Variable list</h1>\n                <p>Something went wrong. Please try again later.</p>\n            </>\n        );\n    }\n\n    if ( variables.length === 0 ) {\n        return (\n            <>\n                <h1>Variable list</h1>\n                <p>The variable list is empty.</p>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <h1>Variable list</h1>\n            <dl>\n                {variables.map(({ID: id, Name: name, Description: description}) => (\n                    <React.Fragment key={id}>\n                        <dt>\n                            <Link to={`/variables/${id}`}>\n                                {name}\n                            </Link>\n                        </dt>\n                        <dd dangerouslySetInnerHTML={prepareHTML(description)} />\n                    </React.Fragment>\n                ))}\n            </dl>\n        </>\n    );\n};\n\n\nexport default Variables;\n","import Variables from './Variables';\n\nexport default Variables;\n","import NotFound from './NotFound';\n\nexport default NotFound;\n","const NotFound = () => (\n    <>\n        <h1>404</h1>\n        <p>Page not found</p>\n    </>\n);\n\n\nexport default NotFound;\n","const routes = {\n    MAIN: '/',\n    VARIABLES: '/variables',\n    VARIABLE: '/variables/:id'\n};\n\n\nexport default routes;\n","import { useEffect, useState, useContext } from 'react';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { getVinVariables } from '../../api';\nimport prepareHTML from '../../utils/prepare.HTML';\nimport routes from '../../constants/routes';\n\nimport { IsVariablesLoadedContext, VariablesContext } from '../../App';\n\n\nconst Variable = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const [variable, setVariable] = useState(null);\n\n    const { isVariablesLoaded, setIsVariablesLoaded } = useContext(IsVariablesLoadedContext);\n    const { variables, setVariables } = useContext(VariablesContext);\n\n    const {id} = useParams();\n\n    useEffect(() => {\n        if (\n            !isVariablesLoaded\n            && !isLoading\n            && !isError\n        ) {\n            async function fetchData () {\n                setIsLoading(true);\n                setIsError(false);\n\n                try {\n                    const {Results: data} = await getVinVariables();\n\n                    setVariables(data);\n                    setIsVariablesLoaded(true);\n                } catch {\n                    setIsError(true);\n                } finally {\n                    setIsLoading(false);\n                }\n            }\n\n            fetchData();\n        }\n    });\n\n    useEffect(() => {\n        setVariable(variables.find(variable => variable.ID === Number(id)));\n    }, [variable, variables, id]);\n\n    if ( isLoading ) {\n        return (\n            <>\n                <h1>Variable description</h1>\n                <p>Loading...</p>\n            </>\n        );\n    }\n\n    if ( isError ) {\n        return (\n            <>\n                <h1>Variable description</h1>\n                <p>Something went wrong. Please try again later.</p>\n            </>\n        );\n    }\n\n    if ( !variable ) {\n        return (\n            <>\n                <h1>Variable description</h1>\n                <p>Variable not found</p>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <h1>Variable description</h1>\n            <dl>\n                <dt>{variable.Name}</dt>\n                <dd dangerouslySetInnerHTML={prepareHTML(variable.Description)} />\n            </dl>\n            <p>\n                <Link to={routes.VARIABLES}>Back to list</Link>\n            </p>\n        </>\n    );\n};\n\n\nexport default Variable;\n","import Variable from './Variable';\n\nexport default Variable;\n","import Menu from './Menu';\n\nexport default Menu;\n","import { NavLink } from 'react-router-dom';\n\nimport routes from '../../constants/routes';\n\n\nconst Menu = () => (\n    <ul>\n        <li>\n            <NavLink to={routes.MAIN} activeClassName='active' exact>Home</NavLink>\n        </li>\n        <li>\n            <NavLink to={routes.VARIABLES} activeClassName='active'>Variables</NavLink>\n        </li>\n    </ul>\n);\n\n\nexport default Menu;\n","import Header from './Header';\n\nexport default Header;\n","import Menu from '../Menu';\nimport './Header.scss';\n\n\nconst Header = () => (\n    <header className='header'>\n        <Menu />\n    </header>\n);\n\n\nexport default Header;\n","import ScrollToTop from './ScrollToTop';\n\nexport default ScrollToTop;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n\nconst ScrollToTop = () => {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        console.log(pathname, 'pathname');\n        window.scrollTo(0,0);\n    }, [pathname]);\n\n    return null;\n};\n\n\nexport default ScrollToTop;\n","import React, { useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport Variables from './components/Variables';\nimport NotFound from './components/NotFound';\nimport Variable from './components/Variable';\nimport Header from './components/Header';\nimport ScrollToTop from './components/ScrollToTop';\n\nimport routes from './constants/routes';\n\nexport const IsVariablesLoadedContext = React.createContext(null);\nexport const VariablesContext = React.createContext(null);\n\n\nconst App = () => {\n    const [isVariablesLoaded, setIsVariablesLoaded] = useState(false);\n    const [variables, setVariables] = useState([]);\n\n    return (\n        <>\n            <ScrollToTop />\n            <VariablesContext.Provider value={{\n                variables,\n                setVariables\n            }}>\n                <IsVariablesLoadedContext.Provider value={{\n                    isVariablesLoaded,\n                    setIsVariablesLoaded\n                }}>\n                    <Header />\n                    <Switch>\n                        <Route path={routes.MAIN} exact>\n                            <Home />\n                        </Route>\n                        <Route path={routes.VARIABLES} exact>\n                            <Variables />\n                        </Route>\n                        <Route path={routes.VARIABLE} exact>\n                            <Variable />\n                        </Route>\n                        <Route path='*'>\n                            <NotFound />\n                        </Route>\n                    </Switch>\n                </IsVariablesLoadedContext.Provider>\n            </VariablesContext.Provider>\n        </>\n    )\n};\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport './index.scss';\n\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router basename='vin-decoder'>\n            <App/>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}